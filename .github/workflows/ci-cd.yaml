name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      vocab: ${{ steps.filter.outputs.vocab }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for file changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          frontend:
            - 'frontend-react/**'
          backend:
            - 'backend-flask/**'
          vocab:
            - 'vocab-importer/**'

  quality-checks:
    needs: changes
    if: |
      needs.changes.outputs.vocab-importer == 'true' ||
      needs.changes.outputs.backend-flask == 'true' ||
      needs.changes.outputs.frontend-react == 'true' ||
      needs.changes.outputs.opea-comps == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['vocab-importer', 'backend-flask', 'opea-comps', 'frontend-react']
    steps:
      - uses: actions/checkout@v4
      
      # Only run if project has changes
      - name: Check if project changed
        id: check
        run: |
          echo "should_run=${{ needs.changes.outputs[matrix.project] == 'true' }}" >> $GITHUB_OUTPUT

      - name: Set up Python
        if: steps.check.outputs.should_run == 'true' && matrix.project != 'frontend-react'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Node.js
        if: steps.check.outputs.should_run == 'true' && matrix.project == 'frontend-react'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Poetry
        if: steps.check.outputs.should_run == 'true' && matrix.project != 'frontend-react'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true

      - name: Run Python checks
        if: steps.check.outputs.should_run == 'true' && matrix.project != 'frontend-react'
        working-directory: ${{ matrix.project }}
        run: |
          poetry install --with dev
          poetry run black . --check
          poetry run isort . --check-only
          poetry run pytest
          poetry run safety check || echo "‚ö†Ô∏è Security issues found but continuing..."

      - name: Run Frontend checks
        if: steps.check.outputs.should_run == 'true' && matrix.project == 'frontend-react'
        working-directory: frontend-react
        run: |
          npm ci
          npm run lint
          npm run test

  security-scan:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    needs: quality-checks
    defaults:
      run:
        working-directory: vocab-importer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        uses: docker/build-push-action@v5
        with:
          context: vocab-importer
          load: true
          tags: vocab-importer:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: vocab-importer:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '5m'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy Container Scan'

      - name: Run Dockle container linting
        uses: goodwithtech/dockle-action@v1
        with:
          image: vocab-importer:${{ github.sha }}
          format: 'sarif'
          output: 'dockle-results.sarif'
          exit-code: '1'
          failure-threshold: 'FATAL,WARN'

      - name: Upload Dockle results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'dockle-results.sarif'
          category: 'Dockle Container Lint'

  deployment:
    name: Production Deployment
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    concurrency: 
      group: production
      cancel-in-progress: false
    
    steps:
      - name: Deployment preparation
        run: |
          echo "üöÄ Preparing to deploy vocab-importer version ${{ github.sha }}"
          # Add actual deployment steps here when needed 